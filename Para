段落：
首先，如果要对一个文档进行指纹提取的话，那么这个指纹提取算法必须满足3个特性。第一，该算法对空格具有不敏感性。也就是说，对文档的初步处理会采取措施，使得文档中空格，标点等的个数对初步处理结果是不具有影响的。第二，算法本身具有噪声抑制的特性。首先需要注意的是，比如“the”这样的单词在文档间出现，然后被检测出来，是没有意义的。所以在匹配方面，匹配必须足够长，使得这样的匹配可以预示着文档间的确存在抄袭或者雷同现象。同样的，比如说在不同文档间出现了相同的谚语，虽然谚语的长度可能足够长，但是不应该就凭此就认为文档间存在雷同。第三，算法与文档内容的位置不存在依赖关系。比如说，两个文档已经存在相似现象，那么在其中一篇文章中插入某些成段内容将不会影响到原先的相似度结果；或者删除了某些无关内容也不会影响到最终的相似度结果。 


分成句子的集合：
首先，如果要对一个文档进行指纹提取的话，那么这个指纹提取算法必须满足3个特性。
第一，该算法对空格具有不敏感性。
也就是说，对文档的初步处理会采取措施，使得文档中空格，标点等的个数对初步处理结果是不具有影响的。
第二，算法本身具有噪声抑制的特性。
首先需要注意的是，比如“the”这样的单词在文档间出现，然后被检测出来，是没有意义的。
所以在匹配方面，匹配必须足够长，使得这样的匹配可以预示着文档间的确存在抄袭或者雷同现象。
同样的，比如说在不同文档间出现了相同的谚语，虽然谚语的长度可能足够长，但是不应该就凭此就认为文档间存在雷同。
第三，算法与文档内容的位置不存在依赖关系。
比如说，两个文档已经存在相似现象，那么在其中一篇文章中插入某些成段内容将不会影响到原先的相似度结果；或者删除了某些无关内容也不会影响到最终的相似度结果。 


挑选出三个最长的句子
比如说，两个文档已经存在相似现象，那么在其中一篇文章中插入某些成段内容将不会影响到原先的相似度结果；或者删除了某些无关内容也不会影响到最终的相似度结果。
同样的，比如说在不同文档间出现了相同的谚语，虽然谚语的长度可能足够长，但是不应该就凭此就认为文档间存在雷同。
也就是说，对文档的初步处理会采取措施，使得文档中空格，标点等的个数对初步处理结果是不具有影响的。

分词
比如说[0, 9] 两个[12, 6] 文档[18, 6] 已经[24, 6] 存在[30, 6] 相似[36, 6] 现象[42, 6] 那么[51, 6] 在其中[57, 9] 一篇[66, 6] 文章[72, 6] 中[78, 3] 插入[81, 6] 某些[87, 6] 成段[93, 6] 内容[99, 6] 将不[105, 6] 会[111, 3] 影响[114, 6] 原先[123, 6] 相似[132, 6] 度[138, 3] 结果[141, 6] 或者[150, 6] 删除[156, 6] 某些[165, 6] 无关[171, 6] 内容[177, 6] 不会[186, 6] 影响[192, 6] 最终[201, 6] 相似[210, 6] 度[216, 3] 结果[219, 6]
同样[0, 6] 比如说[12, 9] 不同[24, 6] 文档[30, 6] 间[36, 3] 出现[39, 6] 相同[48, 6] 谚语[57, 6] 虽然[66, 6] 谚语[72, 6] 长度[81, 6] 可能[87, 6] 足够[93, 6] 长[99, 3] 但是[105, 6] 不应该[111, 9] 凭此[123, 6] 认为[132, 6] 文档[138, 6] 间[144, 3] 存在[147, 6] 雷同[153, 6] 
也就是说[0, 12] 对[15, 3] 文档[18, 6] 初步[27, 6] 处理[33, 6] 会[39, 3] 采取措施[42, 12] 使得[57, 6] 文档[63, 6] 中[69, 3] 空格[72, 6] 标点[81, 6] 等[87, 3] 个数[93, 6] 对[99, 3] 初步[102, 6] 处理[108, 6] 结果[114, 6] 不具[123, 6] 有影[129, 6] 响的[135, 6] 

计算每个句子的simhash
sim1
sim2
sim3


